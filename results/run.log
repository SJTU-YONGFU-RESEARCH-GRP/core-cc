===== Running ECC Benchmarking with Report Generation =====
üöÄ Enhanced ECC Benchmark Suite with Parallel Processing
============================================================
üìä ECC Types: 19
üìè Word Lengths: [4, 8, 16, 32]
‚ö†Ô∏è  Error Patterns: ['single', 'double', 'burst', 'random']
üîÑ Trials per config: 10000
üéØ Total configurations: 304
‚ö° Parallel method: processes
üîß Adaptive workers: True

üíª System: 16 CPUs, 58.9 GB RAM
üìã Total configurations to test: 304
üîß ECC Types: ['ParityECC', 'HammingSECDEDECC', 'BCHECC', 'ReedSolomonECC', 'CRCECC', 'GolayECC', 'RepetitionECC', 'LDPCECC', 'TurboECC', 'ConvolutionalECC', 'PolarECC', 'ExtendedHammingECC', 'ProductCodeECC', 'ConcatenatedECC', 'ReedMullerECC', 'FireCodeECC', 'SpatiallyCoupledLDPCECC', 'NonBinaryLDPCECC', 'RaptorCodeECC']
üìè Word Lengths: [4, 8, 16, 32]
‚ö†Ô∏è  Error Patterns: ['single', 'double', 'burst', 'random']
üîÑ Trials per configuration: 10000

‚è≠Ô∏è  Skipping ParityECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ParityECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping HammingSECDEDECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping BCHECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedSolomonECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping CRCECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping GolayECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RepetitionECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping LDPCECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping TurboECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConvolutionalECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping PolarECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ExtendedHammingECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ProductCodeECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ConcatenatedECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping ReedMullerECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping NonBinaryLDPCECC (32 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (4 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (4 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (4 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (4 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (8 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (8 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (8 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (8 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (16 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (16 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (16 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (16 bits, random errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (32 bits, single errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (32 bits, double errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (32 bits, burst errors) - already exists
‚è≠Ô∏è  Skipping RaptorCodeECC (32 bits, random errors) - already exists
üìã Skipped 288 existing configurations. Use --overwrite to re-run all.
üéØ Remaining configurations to run: 16

üöÄ Starting benchmark execution...
‚è±Ô∏è  Estimated time: ~32 minutes (2 min per config)

üîÑ Using ProcessPoolExecutor with 12 workers
üîÑ Worker starting: FireCodeECC (4 bits, double errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (32 bits, single errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (4 bits, random errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (16 bits, single errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (8 bits, random errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (32 bits, double errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (4 bits, single errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (32 bits, burst errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (4 bits, burst errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (32 bits, random errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (16 bits, burst errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (16 bits, double errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (8 bits, burst errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (8 bits, double errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (8 bits, single errors) - 10000 trials
üîÑ Worker starting: FireCodeECC (16 bits, random errors) - 10000 trials
Error in benchmark {'id': 1, 'ecc_type_name': 'FireCodeECC', 'word_length': 4, 'error_pattern': 'double', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 7, 'ecc_type_name': 'FireCodeECC', 'word_length': 8, 'error_pattern': 'random', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 0, 'ecc_type_name': 'FireCodeECC', 'word_length': 4, 'error_pattern': 'single', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 2, 'ecc_type_name': 'FireCodeECC', 'word_length': 4, 'error_pattern': 'burst', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 3, 'ecc_type_name': 'FireCodeECC', 'word_length': 4, 'error_pattern': 'random', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 12, 'ecc_type_name': 'FireCodeECC', 'word_length': 32, 'error_pattern': 'single', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 8, 'ecc_type_name': 'FireCodeECC', 'word_length': 16, 'error_pattern': 'single', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 13, 'ecc_type_name': 'FireCodeECC', 'word_length': 32, 'error_pattern': 'double', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 5, 'ecc_type_name': 'FireCodeECC', 'word_length': 8, 'error_pattern': 'double', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 15, 'ecc_type_name': 'FireCodeECC', 'word_length': 32, 'error_pattern': 'random', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 14, 'ecc_type_name': 'FireCodeECC', 'word_length': 32, 'error_pattern': 'burst', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 10, 'ecc_type_name': 'FireCodeECC', 'word_length': 16, 'error_pattern': 'burst', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 9, 'ecc_type_name': 'FireCodeECC', 'word_length': 16, 'error_pattern': 'double', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 4, 'ecc_type_name': 'FireCodeECC', 'word_length': 8, 'error_pattern': 'single', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 6, 'ecc_type_name': 'FireCodeECC', 'word_length': 8, 'error_pattern': 'burst', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'
Error in benchmark {'id': 11, 'ecc_type_name': 'FireCodeECC', 'word_length': 16, 'error_pattern': 'random', 'trials_per_config': 10000, 'burst_length': 3, 'random_error_prob': 0.01, 'output_dir': 'results', 'measure_timing': True, 'measure_memory': False}: FireCodeECC.__init__() got an unexpected keyword argument 'word_length'

‚úÖ Benchmarking completed!
üìä Total results: 336
üéØ Successful configurations: 336
Benchmark results saved to results

üìä Enhanced Benchmark Summary:
==================
BCHECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 4.985
  Avg Overhead: -0.344
  Avg Encode Time: 0.000 ms
  Avg Decode Time: 0.000 ms

BurstErrorECC:
  Avg Correction Rate: 0.18%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.520
  Avg Overhead: 0.930
  Avg Encode Time: 0.049 ms
  Avg Decode Time: 2.249 ms

ConcatenatedECC:
  Avg Correction Rate: 0.65%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.369
  Avg Overhead: 1.920
  Avg Encode Time: 0.043 ms
  Avg Decode Time: 0.047 ms

ConvolutionalECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.990
  Avg Overhead: 0.322
  Avg Encode Time: 0.022 ms
  Avg Decode Time: 567.408 ms

CRCECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.593
  Avg Overhead: 0.871
  Avg Encode Time: 0.000 ms
  Avg Decode Time: 0.000 ms

ExtendedHammingECC:
  Avg Correction Rate: 0.38%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.716
  Avg Overhead: 0.434
  Avg Encode Time: 0.022 ms
  Avg Decode Time: 0.023 ms

GolayECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.607
  Avg Overhead: 0.832
  Avg Encode Time: 0.000 ms
  Avg Decode Time: 0.000 ms

HammingSECDEDECC:
  Avg Correction Rate: 0.92%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.755
  Avg Overhead: 0.357
  Avg Encode Time: 0.018 ms
  Avg Decode Time: 0.019 ms

LDPCECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.729
  Avg Overhead: 0.768
  Avg Encode Time: 0.000 ms
  Avg Decode Time: 0.000 ms

NonBinaryLDPCECC:
  Avg Correction Rate: 0.43%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.645
  Avg Overhead: 0.752
  Avg Encode Time: 0.047 ms
  Avg Decode Time: 1.834 ms

ParityECC:
  Avg Correction Rate: 0.40%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.995
  Avg Overhead: 0.016
  Avg Encode Time: 0.003 ms
  Avg Decode Time: 0.003 ms

PolarECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.727
  Avg Overhead: 0.734
  Avg Encode Time: 0.000 ms
  Avg Decode Time: 0.000 ms

PrimarySecondaryECC:
  Avg Correction Rate: 0.62%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.640
  Avg Overhead: 0.754
  Avg Encode Time: 0.042 ms
  Avg Decode Time: 1.154 ms

ProductCodeECC:
  Avg Correction Rate: 0.51%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.332
  Avg Overhead: 2.598
  Avg Encode Time: 0.028 ms
  Avg Decode Time: 0.032 ms

RaptorCodeECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.807
  Avg Overhead: 0.453
  Avg Encode Time: 0.015 ms
  Avg Decode Time: 0.007 ms

ReedMullerECC:
  Avg Correction Rate: 0.62%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 1.134
  Avg Overhead: 0.561
  Avg Encode Time: 0.045 ms
  Avg Decode Time: 1.266 ms

ReedSolomonECC:
  Avg Correction Rate: 0.99%
  Avg Detection Rate: 0.99%
  Avg Success Rate: 0.99%
  Avg Code Rate: 0.240
  Avg Overhead: 6.420
  Avg Encode Time: 0.008 ms
  Avg Decode Time: 0.047 ms

RepetitionECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.389
  Avg Overhead: 1.666
  Avg Encode Time: 0.010 ms
  Avg Decode Time: 0.013 ms

SpatiallyCoupledLDPCECC:
  Avg Correction Rate: 0.61%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.734
  Avg Overhead: 0.531
  Avg Encode Time: 0.015 ms
  Avg Decode Time: 0.155 ms

SystemECC:
  Avg Correction Rate: 0.30%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.714
  Avg Overhead: 0.447
  Avg Encode Time: 0.018 ms
  Avg Decode Time: 0.008 ms

TurboECC:
  Avg Correction Rate: 1.00%
  Avg Detection Rate: 1.00%
  Avg Success Rate: 1.00%
  Avg Code Rate: 0.347
  Avg Overhead: 1.895
  Avg Encode Time: 0.027 ms
  Avg Decode Time: 0.006 ms

===== Generating Report from Benchmark Results =====
/mnt/d/proj/ecc/venv/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:586: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.
  res = hypotest_fun_out(*samples, **kwds)
Running ECC analysis...

üîç Running ECC implementation verification...
üìã Loaded verification cache with 55 entries
üîç Verifying all ECC implementations...
üîç Testing 52 ECC configurations sequentially...
============================================================

üìã Testing ParityECC...
----------------------------------------

[1/52] ParityECC_4:
‚è≠Ô∏è  Skipping ParityECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 97/100 (97.0%)
  Performance:     90/100 (90.0%)
  Overall:         ‚úÖ PASS

[2/52] ParityECC_8:
‚è≠Ô∏è  Skipping ParityECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing HammingSECDEDECC...
----------------------------------------

[3/52] HammingSECDEDECC_4:
‚è≠Ô∏è  Skipping HammingSECDEDECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 94/100 (94.0%)
  Performance:     93/100 (93.0%)
  Overall:         ‚úÖ PASS

[4/52] HammingSECDEDECC_8:
‚è≠Ô∏è  Skipping HammingSECDEDECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 98/100 (98.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing RepetitionECC...
----------------------------------------

[5/52] RepetitionECC_4:
‚è≠Ô∏è  Skipping RepetitionECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     94/100 (94.0%)
  Overall:         ‚úÖ PASS

[6/52] RepetitionECC_8:
‚è≠Ô∏è  Skipping RepetitionECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing BCHECC...
----------------------------------------

[7/52] BCHECC_4:
‚è≠Ô∏è  Skipping BCHECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     97/100 (97.0%)
  Overall:         ‚úÖ PASS

[8/52] BCHECC_8:
‚è≠Ô∏è  Skipping BCHECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ReedSolomonECC...
----------------------------------------

[9/52] ReedSolomonECC_4:
‚è≠Ô∏è  Skipping ReedSolomonECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 92/100 (92.0%)
  Performance:     97/100 (97.0%)
  Overall:         ‚úÖ PASS

[10/52] ReedSolomonECC_8:
‚è≠Ô∏è  Skipping ReedSolomonECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing CRCECC...
----------------------------------------

[11/52] CRCECC_4:
‚è≠Ô∏è  Skipping CRCECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 95/100 (95.0%)
  Performance:     93/100 (93.0%)
  Overall:         ‚úÖ PASS

[12/52] CRCECC_8:
‚è≠Ô∏è  Skipping CRCECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     99/100 (99.0%)
  Overall:         ‚úÖ PASS

üìã Testing GolayECC...
----------------------------------------

[13/52] GolayECC_4:
‚è≠Ô∏è  Skipping GolayECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 94/100 (94.0%)
  Performance:     97/100 (97.0%)
  Overall:         ‚úÖ PASS

[14/52] GolayECC_8:
‚è≠Ô∏è  Skipping GolayECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     99/100 (99.0%)
  Overall:         ‚úÖ PASS

üìã Testing LDPCECC...
----------------------------------------

[15/52] LDPCECC_4:
‚è≠Ô∏è  Skipping LDPCECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 94/100 (94.0%)
  Performance:     96/100 (96.0%)
  Overall:         ‚úÖ PASS

[16/52] LDPCECC_8:
‚è≠Ô∏è  Skipping LDPCECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     98/100 (98.0%)
  Overall:         ‚úÖ PASS

üìã Testing TurboECC...
----------------------------------------

[17/52] TurboECC_4:
‚è≠Ô∏è  Skipping TurboECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

[18/52] TurboECC_8:
‚è≠Ô∏è  Skipping TurboECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ConvolutionalECC...
----------------------------------------

[19/52] ConvolutionalECC_4:
‚è≠Ô∏è  Skipping ConvolutionalECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 94/100 (94.0%)
  Performance:     94/100 (94.0%)
  Overall:         ‚úÖ PASS

[20/52] ConvolutionalECC_8:
‚è≠Ô∏è  Skipping ConvolutionalECC_8 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     98/100 (98.0%)
  Overall:         ‚úÖ PASS

üìã Testing PolarECC...
----------------------------------------

[21/52] PolarECC_4:
‚è≠Ô∏è  Skipping PolarECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 89/100 (89.0%)
  Performance:     97/100 (97.0%)
  Overall:         ‚úÖ PASS

[22/52] PolarECC_8:
      Creating PolarECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 56 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ExtendedHammingECC...
----------------------------------------

[23/52] ExtendedHammingECC_4:
‚è≠Ô∏è  Skipping ExtendedHammingECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[24/52] ExtendedHammingECC_8:
      Creating ExtendedHammingECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 99/100 (99.00%)
üíæ Saved verification cache with 57 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     99/100 (99.0%)
  Overall:         ‚úÖ PASS

üìã Testing ProductCodeECC...
----------------------------------------

[25/52] ProductCodeECC_4:
‚è≠Ô∏è  Skipping ProductCodeECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 97/100 (97.0%)
  Performance:     96/100 (96.0%)
  Overall:         ‚úÖ PASS

[26/52] ProductCodeECC_8:
      Creating ProductCodeECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 58 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ConcatenatedECC...
----------------------------------------

[27/52] ConcatenatedECC_4:
‚è≠Ô∏è  Skipping ConcatenatedECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 97/100 (97.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[28/52] ConcatenatedECC_8:
      Creating ConcatenatedECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 59 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ReedMullerECC...
----------------------------------------

[29/52] ReedMullerECC_4:
‚è≠Ô∏è  Skipping ReedMullerECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[30/52] ReedMullerECC_8:
      Creating ReedMullerECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 60 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing FireCodeECC...
----------------------------------------

[31/52] FireCodeECC_4:
‚è≠Ô∏è  Skipping FireCodeECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 96/100 (96.0%)
  Performance:     92/100 (92.0%)
  Overall:         ‚úÖ PASS

[32/52] FireCodeECC_8:
      Creating FireCodeECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 61 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing SpatiallyCoupledLDPCECC...
----------------------------------------

[33/52] SpatiallyCoupledLDPCECC_4:
‚è≠Ô∏è  Skipping SpatiallyCoupledLDPCECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 95/100 (95.0%)
  Performance:     92/100 (92.0%)
  Overall:         ‚úÖ PASS

[34/52] SpatiallyCoupledLDPCECC_8:
      Creating SpatiallyCoupledLDPCECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 62 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing NonBinaryLDPCECC...
----------------------------------------

[35/52] NonBinaryLDPCECC_4:
‚è≠Ô∏è  Skipping NonBinaryLDPCECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 96/100 (96.0%)
  Performance:     91/100 (91.0%)
  Overall:         ‚úÖ PASS

[36/52] NonBinaryLDPCECC_8:
      Creating NonBinaryLDPCECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 63 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing RaptorCodeECC...
----------------------------------------

[37/52] RaptorCodeECC_4:
‚è≠Ô∏è  Skipping RaptorCodeECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 95/100 (95.0%)
  Performance:     91/100 (91.0%)
  Overall:         ‚úÖ PASS

[38/52] RaptorCodeECC_8:
      Creating RaptorCodeECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 64 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing CompositeECC...
----------------------------------------

[39/52] CompositeECC_4:
‚è≠Ô∏è  Skipping CompositeECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     93/100 (93.0%)
  Overall:         ‚úÖ PASS

[40/52] CompositeECC_8:
      Creating CompositeECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 65 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing SystemECC...
----------------------------------------

[41/52] SystemECC_4:
‚è≠Ô∏è  Skipping SystemECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     94/100 (94.0%)
  Overall:         ‚úÖ PASS

[42/52] SystemECC_8:
      Creating SystemECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 66 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing AdaptiveECC...
----------------------------------------

[43/52] AdaptiveECC_4:
‚è≠Ô∏è  Skipping AdaptiveECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 93/100 (93.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[44/52] AdaptiveECC_8:
      Creating AdaptiveECC instance for 8 bits...
      Running round-trip tests...
üîÑ Adapting ECC: HammingSECDED ‚Üí HammingSECDEDECC (error_rate: 0.000)
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 67 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing ThreeDMemoryECC...
----------------------------------------

[45/52] ThreeDMemoryECC_4:
‚è≠Ô∏è  Skipping ThreeDMemoryECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 95/100 (95.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[46/52] ThreeDMemoryECC_8:
      Creating ThreeDMemoryECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 1, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 1, position 1
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 1, position 1
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 1, position 0
üîß 3D Memory: Corrected bit at layer 0, position 1
üîß 3D Memory: Corrected bit at layer 2, position 0
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 2, position 1
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 3, position 0
üîß 3D Memory: Corrected bit at layer 3, position 1
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 0, position 0
üîß 3D Memory: Corrected bit at layer 2, position 0
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 68 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing PrimarySecondaryECC...
----------------------------------------

[47/52] PrimarySecondaryECC_4:
‚è≠Ô∏è  Skipping PrimarySecondaryECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 91/100 (91.0%)
  Performance:     95/100 (95.0%)
  Overall:         ‚úÖ PASS

[48/52] PrimarySecondaryECC_8:
      Creating PrimarySecondaryECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 99/100 (99.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 69 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 99/100 (99.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

üìã Testing CyclicECC...
----------------------------------------

[49/52] CyclicECC_4:
‚è≠Ô∏è  Skipping CyclicECC_4 - cached PASS result
  Round-trip:     97/100 (97.0%)
  Error correction: 94/100 (94.0%)
  Performance:     93/100 (93.0%)
  Overall:         ‚úÖ PASS

[50/52] CyclicECC_8:
      Creating CyclicECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 95/100 (95.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 98/100 (98.00%)
üíæ Saved verification cache with 70 entries
  Round-trip:     95/100 (95.0%)
  Error correction: 100/100 (100.0%)
  Performance:     98/100 (98.0%)
  Overall:         ‚úÖ PASS

üìã Testing BurstErrorECC...
----------------------------------------

[51/52] BurstErrorECC_4:
‚è≠Ô∏è  Skipping BurstErrorECC_4 - cached PASS result
  Round-trip:     100/100 (100.0%)
  Error correction: 97/100 (97.0%)
  Performance:     98/100 (98.0%)
  Overall:         ‚úÖ PASS

[52/52] BurstErrorECC_8:
      Creating BurstErrorECC instance for 8 bits...
      Running round-trip tests...
          Round-trip progress: 100/100
        Round-trip: 100/100 (100.00%)
      Running error correction tests...
        Error correction: 100/100 (100.00%)
      Running performance tests...
        Performance: 100/100 (100.00%)
üíæ Saved verification cache with 71 entries
  Round-trip:     100/100 (100.0%)
  Error correction: 100/100 (100.0%)
  Performance:     100/100 (100.0%)
  Overall:         ‚úÖ PASS

============================================================
üìä VERIFICATION SUMMARY
============================================================
‚úÖ Passed: 52/52 configurations
‚ùå Failed: 0/52 configurations
üìà Success Rate: 100.0%
Analysis complete. Generated 3 visualization charts.

ECC Analysis Summary
===================
Total configurations analyzed: 336
ECC types tested: 21

Performance Rankings:
  1. BCHECC
  2. ReedMullerECC
  3. ParityECC
  4. RaptorCodeECC
  5. HammingSECDEDECC
  6. SpatiallyCoupledLDPCECC
  7. LDPCECC
  8. PolarECC
  9. ExtendedHammingECC
  10. SystemECC
  11. ConvolutionalECC
  12. NonBinaryLDPCECC
  13. PrimarySecondaryECC
  14. GolayECC
  15. CRCECC
  16. BurstErrorECC
  17. RepetitionECC
  18. ConcatenatedECC
  19. TurboECC
  20. ProductCodeECC
  21. ReedSolomonECC

Best ECC for Different Scenarios:
  high_reliability: BCHECC
  high_efficiency: BCHECC
  high_speed: BCHECC
  single_bit_errors: BCHECC
  burst_errors: BCHECC
  random_errors: BCHECC

Top Recommendations:
  1. **Overall Best Performer:** BCHECC ranks highest in composite performance score.
  2. **For High Reliability:** BCHECC provides the highest success rate across all scenarios.
  3. **For High Efficiency:** BCHECC offers the best code rate (data efficiency).
  4. **For High Speed:** BCHECC has the fastest encoding/decoding times.
  5. **For Single Bit Errors:** BCHECC provides the best correction rate for single bit errors.

ECC Implementation Verification:
  Verification Status: 52/52 configurations passed

===== ECC Framework Execution Completed =====
Mode executed: benchmark
ECC benchmarking completed.
Benchmark results saved to: results/benchmark_results.json
Detailed logs available in: results/run.log

Parallel processing options used:
  - Multiprocessing enabled
  - Workers: auto
